Servlet Filters
===============
Filter is an object which is executed at the time of preprocessing and postprocessing the the request.

Diagram: servlet6.1

The main objective of Filter are

1) To count number of request coming to the application.

2) To peform form validations.

3) To perform encryption and decryption.

Like Servlet, Filter is also having having it's own Filter API.

A javax.servlet package defines three interfaces of Filter API.

1) Filter 

2) FilterConfig 

3) FilterChain 


Deployment Directory structure
----------------------------
FilterApp
|
|---Java Resources
	|
	|-----src
		|
		|---com.ihub.www
			|
			|-----MyFilter.java
			|-----MyServlet.java
|---Web Content
	|
	|----index.html 
	|
	|----WEB-INF
		|
		|----web.xml 
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.


index.html
--------

<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>


web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>MyServlet</servlet-name>
  	<servlet-class>com.ihub.www.MyServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>MyServlet</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <filter>
  	<filter-name>MyFilter</filter-name>
  	<filter-class>com.ihub.www.MyFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>MyFilter</filter-name>
  	<url-pattern>/test</url-pattern>
  </filter-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

MyFilter.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class MyFilter implements Filter 
{
	
	@Override
	public void init(FilterConfig config) throws ServletException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void doFilter(ServletRequest req, ServletResponse res,
			FilterChain chain) throws IOException, ServletException {
		
			PrintWriter pw=res.getWriter();
			res.setContentType("text/html");
			
			pw.println("<center><h1> Filter Invoked Before </h1></center>");
			chain.doFilter(req,res);
			pw.println("<center><h1> Filter Invoked After </h1></center>");
		
	}
	

	@Override
	public void destroy() {
		// TODO Auto-generated method stub
		
	}

}

MyServlet.java
--------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class MyServlet extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Servlet is Invoked</h1></center>");
		
	}
}

Request url
--------
	http://localhost:2525/FilterApp/

Servlet Life Cycle Methods
==========================
We have three life cycle methods in servlet.

1) public void init(ServletConfig config)throws ServletException 
----------------------------------------------
	It is used for instantiation event.
	This method will execute just before servlet object creation.


2) public void service(ServletRequest req,ServletResponse res)throws   	ServletException,IOException 
----------------------------------------
	It is used for request arrival event.
	This method will execute when request goes to servlet program.

3) public void destroy() 
----------------------
	It is used for destruction event.
	This method will execute just before servlet object destruction.

Deployment Directroy structure
------------------------------
LifeCycleApp
|
|---Java Resources
	|
	|------src
		|
		|---com.ihub.www
			|
			|-----TestSrv.java
|---Web Content
	|
	|---index.html
	|
	|---WEB-INF
		|
		|----web.xml 
Note:
----
In above application , we need to add "servlet-api.jar" file in project build path.


index.html
---------
<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>


web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
 <welcome-file-list>
 	<welcome-file>index.html</welcome-file>
 </welcome-file-list>
 
 <servlet>
 	<servlet-name>TestSrv</servlet-name>
 	<servlet-class>com.ihub.www.TestSrv</servlet-class>
 </servlet>
 <servlet-mapping>
 	<servlet-name>TestSrv</servlet-name>
 	<url-pattern>/test</url-pattern>
 </servlet-mapping>
 
</web-app>

TestSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;

public class TestSrv extends HttpServlet 
{
	public void init(ServletConfig config)throws ServletException
	{
		
	}
	public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center><h1>Servlet method called</h1></center>");
		
	}
	public void destroy()
	{
		
	}
}

Request url
-----------
	http://localhost:2525/LifeCycleApp/


Assignment
===========






















































































































