Types of ResultSet objects
==========================
We have two types of ResultSet objects.

1) Non-Scrollable ResultSet object 

2) Scrollable ResultSet object 

Diagram: jdbc8.1


1) Non-Scrollable ResultSet object 
-----------------------------------
A ResultSet object which allows us to read the records sequentially, unidirectionally is called non-scrollable ResultSet object.

By default every ResultSet object is a non-scrollable ResultSet object.

If JDBC Statement object is created without type,mode value then that ResultSet object is non-scrollable ResultSet object.
ex:
	Statement st=con.createStatement();
	ResultSet rs=st.executeQuery("select * from student");


2) Scrollable ResultSet object
-------------------------------
A ResultSet object which allows us to read the records non-sequentially, bidirectionally or randomly is called scrollable ResultSet object.

If JDBC Statement object is created with type,mode value then that ResultSet object is scrollable ResultSet object.
ex:
	Statement st=con.createStatement(type,mode);
	ResultSet rs=st.executeQuery("select * from student");

We have two type values.
ex:
	ResultSet.TYPE_SCROLL_SENSITIVE
	ResultSet.TYPE_SCROLL_INSENSITIVE

We have two mode values.
ex:
	ResultSet.CONCUR_READ_ONLY
	ResultSet.CONCUR_UPDATABLE


Various methods present in Scrollable ResultSet object
=======================================================
1) getRow() 
-----------
	It will return position of record pointer.

2) next()
----------
	It will move record pointer to next position from current position.

3) getXxx()
-----------
	It is used to read the values from record ResultSet.

4) close() 
----------
	It is used to close ResultSet object.

5) previous()
-----------
	It will move record pointer to previous position.

6) first()
--------
	It will set record pointer to first record.

7) isFirst()
----------
	It is used to check record pointer is in first record or not.

8) last()
---------
	It will set record pointer to last record.

9) isLast()
--------
	It is used to check record pointer is in last record or not.

10) beforeFirst()
---------------
	It is used to set the record pointer to BFR position.

11) afterLast()
-------------
	It is used to set the record pointer to ALR position.

12) relative(+/-)
-----------------
	It will move record pointer to next position based on current position.

13) abosluate(+/-)
---------------
	It will move record pointer to next position based on BFR and ALR position.

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class ScrollableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		
		//top to bottom
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.afterLast();
		while(rs.previous())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.first();
		System.out.println(rs.isFirst());
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.last();
		System.out.println(rs.isLast());
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		//rs.relative(-2);
		//System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.absolute(-2);
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		st.close();
		con.close();
		rs.close();
	}
}

Batch Processing
=================
Batch processing is used to declare multiple queries in a batch and makes a single call to the database.

In batch process, we need to add all the queries to batch by using addBatch() method.
ex:
	st.addBatch(qry);

We can execute the batch by using executeBatch() method.
ex:
	int[] arr=st.executeBatch();

ex:
----
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessingApp {

	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		String qry1="insert into student values(104,'ramulu','pune')";
		String qry2="delete from student where sno=103";
		String qry3="update student set sname='rani' where sno=101";
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] arr=st.executeBatch();	
		
		//for each loop
		int sum=0;
		for(int i:arr)
		{
			sum+=i;
		}
		System.out.println("No of records effected are ="+sum);
		
		st.close();
		con.close();
	}

}



Transaction Management
======================
A transaction is a set of one or more statements that is executed as a unit.

If transaction done successfully then will commit.

If transaction failed then it will rollback.

ex:
---

SBI table
=========
drop table sbi;

create table sbi(accno number(6), accholder varchar2(10), accbal number(10));

insert into sbi values(100001,'vamshi',5000);
insert into sbi values(200002,'sham',6000);
commit;

Kotak table
===========
drop table kotak;

create table kotak(accno number(6),accholder varchar2(10),accbal number(10));

insert into kotak values(111111,'venkat',80000);
insert into kotak values(222222,'pulley',90000);
commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class TXNManagementApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the source Account No :");
		int sno=sc.nextInt();
		
		System.out.println("Enter the destination Account No :");
		int dno=sc.nextInt();
		
		System.out.println("Enter the amount to transfer :");
		int amt=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		//set auto commit false
		con.setAutoCommit(false);
		
		Statement st=con.createStatement();
		
		//create queries
		String qry1="update kotak set accbal=accbal-"+amt+" where accno="+sno;
		String qry2="update sbi set accbal=accbal+"+amt+" where accno="+dno;
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		
		//execute the batch
		int[] arr=st.executeBatch();
		
		//for each loop
		boolean flag=true;
		for(int i:arr)
		{
			if(i==0)
			{
				flag=false;
				break;
			}
		}
		
		if(flag==true)
		{
			System.out.println("Transaction Done Successfully");
			con.commit();
		}
		else
		{
			System.out.println("Transaction Failed!!");
			con.rollback();
		}
		
		st.close();
		con.close();
		
	}
}





























































































































	














